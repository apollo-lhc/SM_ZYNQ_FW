--This file was auto-generated.
--Modifications might be lost.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.AXIRegWidthPkg.all;
use work.AXIRegPkg.all;
use work.types.all;
use work.CM_Ctrl.all;

entity CM_map is
  port (
    clk_axi          : in  std_logic;
    reset_axi_n      : in  std_logic;
    slave_readMOSI   : in  AXIReadMOSI;
    slave_readMISO   : out AXIReadMISO  := DefaultAXIReadMISO;
    slave_writeMOSI  : in  AXIWriteMOSI;
    slave_writeMISO  : out AXIWriteMISO := DefaultAXIWriteMISO;
    Mon              : in  CM_Mon_t;
    Ctrl             : out CM_Ctrl_t
    );
end entity CM_map;
architecture behavioral of CM_map is
  signal localAddress       : std_logic_vector(AXI_ADDR_WIDTH-1 downto 0);
  signal localRdData        : slv_32_t;
  signal localRdData_latch  : slv_32_t;
  signal localWrData        : slv_32_t;
  signal localWrEn          : std_logic;
  signal localRdReq         : std_logic;
  signal localRdAck         : std_logic;


  signal reg_data :  slv32_array_t(integer range 0 to 3381);
  constant Default_reg_data : slv32_array_t(integer range 0 to 3381) := (others => x"00000000");
begin  -- architecture behavioral

  -------------------------------------------------------------------------------
  -- AXI 
  -------------------------------------------------------------------------------
  -------------------------------------------------------------------------------
  AXIRegBridge : entity work.axiLiteReg
    port map (
      clk_axi     => clk_axi,
      reset_axi_n => reset_axi_n,
      readMOSI    => slave_readMOSI,
      readMISO    => slave_readMISO,
      writeMOSI   => slave_writeMOSI,
      writeMISO   => slave_writeMISO,
      address     => localAddress,
      rd_data     => localRdData_latch,
      wr_data     => localWrData,
      write_en    => localWrEn,
      read_req    => localRdReq,
      read_ack    => localRdAck);

  latch_reads: process (clk_axi) is
  begin  -- process latch_reads
    if clk_axi'event and clk_axi = '1' then  -- rising clock edge
      if localRdReq = '1' then
        localRdData_latch <= localRdData;        
      end if;
    end if;
  end process latch_reads;
  reads: process (localRdReq,localAddress,reg_data) is
  begin  -- process reads
    localRdAck  <= '0';
    localRdData <= x"00000000";
    if localRdReq = '1' then
      localRdAck  <= '1';
      case to_integer(unsigned(localAddress(11 downto 0))) is

        when 1024 => --0x400
          localRdData( 0)            <=  Mon.CM(1).C2C(1).STATUS.CONFIG_ERROR;                    --C2C config error
          localRdData( 1)            <=  Mon.CM(1).C2C(1).STATUS.LINK_ERROR;                      --C2C link error
          localRdData( 2)            <=  Mon.CM(1).C2C(1).STATUS.LINK_GOOD;                       --C2C link FSM in SYNC
          localRdData( 3)            <=  Mon.CM(1).C2C(1).STATUS.MB_ERROR;                        --C2C multi-bit error
          localRdData( 4)            <=  Mon.CM(1).C2C(1).STATUS.DO_CC;                           --Aurora do CC
          localRdData( 5)            <=  reg_data(1024)( 5);                                      --C2C initialize
          localRdData( 8)            <=  Mon.CM(1).C2C(1).STATUS.PHY_RESET;                       --Aurora phy in reset
          localRdData( 9)            <=  Mon.CM(1).C2C(1).STATUS.PHY_GT_PLL_LOCK;                 --Aurora phy GT PLL locked
          localRdData(10)            <=  Mon.CM(1).C2C(1).STATUS.PHY_MMCM_LOL;                    --Aurora phy mmcm LOL
          localRdData(13 downto 12)  <=  Mon.CM(1).C2C(1).STATUS.PHY_LANE_UP;                     --Aurora phy lanes up
          localRdData(16)            <=  Mon.CM(1).C2C(1).STATUS.PHY_HARD_ERR;                    --Aurora phy hard error
          localRdData(17)            <=  Mon.CM(1).C2C(1).STATUS.PHY_SOFT_ERR;                    --Aurora phy soft error
          localRdData(31)            <=  Mon.CM(1).C2C(1).STATUS.LINK_IN_FW;                      --FW includes this link
        when 1028 => --0x404
          localRdData( 7 downto  0)  <=  Mon.CM(1).C2C(1).DEBUG.DMONITOR;                         --DEBUG d monitor
          localRdData(20)            <=  Mon.CM(1).C2C(1).DEBUG.CPLL_LOCK;                        --DEBUG cplllock
          localRdData(21)            <=  Mon.CM(1).C2C(1).DEBUG.EYESCAN_DATA_ERROR;               --DEBUG eyescan data error
          localRdData(22)            <=  reg_data(1028)(22);                                      --DEBUG eyescan reset
          localRdData(23)            <=  reg_data(1028)(23);                                      --DEBUG eyescan trigger
          localRdData(24)            <=  Mon.CM(1).C2C(1).DEBUG.QPLL_LOCK;                        --DEBUG qplllock
        when 1030 => --0x406
          localRdData( 2 downto  0)  <=  Mon.CM(1).C2C(1).DEBUG.RX.BUF_STATUS;                    --DEBUG rx buf status
          localRdData( 9 downto  3)  <=  Mon.CM(1).C2C(1).DEBUG.RX.MONITOR;                       --DEBUG rx status
          localRdData(10)            <=  Mon.CM(1).C2C(1).DEBUG.RX.PRBS_ERR;                      --DEBUG rx PRBS error
          localRdData(11)            <=  Mon.CM(1).C2C(1).DEBUG.RX.RESET_DONE;                    --DEBUG rx reset done
          localRdData(12)            <=  reg_data(1030)(12);                                      --DEBUG rx buf reset
          localRdData(13)            <=  reg_data(1030)(13);                                      --DEBUG rx CDR hold
          localRdData(14)            <=  reg_data(1030)(14);                                      --DEBUG rx DFE AGC HOLD
          localRdData(15)            <=  reg_data(1030)(15);                                      --DEBUG rx DFE AGC OVERRIDE
          localRdData(16)            <=  reg_data(1030)(16);                                      --DEBUG rx DFE LF HOLD
          localRdData(17)            <=  reg_data(1030)(17);                                      --DEBUG rx DFE LPM RESET
          localRdData(18)            <=  reg_data(1030)(18);                                      --DEBUG rx LPM ENABLE
          localRdData(19)            <=  reg_data(1030)(19);                                      --DEBUG rx LPM HF OVERRIDE enable
          localRdData(20)            <=  reg_data(1030)(20);                                      --DEBUG rx LPM LFKL override
          localRdData(22 downto 21)  <=  reg_data(1030)(22 downto 21);                            --DEBUG rx monitor select
          localRdData(23)            <=  reg_data(1030)(23);                                      --DEBUG rx pcs reset
          localRdData(24)            <=  reg_data(1030)(24);                                      --DEBUG rx pma reset
          localRdData(25)            <=  reg_data(1030)(25);                                      --DEBUG rx PRBS counter reset
          localRdData(28 downto 26)  <=  reg_data(1030)(28 downto 26);                            --DEBUG rx PRBS select
        when 1032 => --0x408
          localRdData( 1 downto  0)  <=  Mon.CM(1).C2C(1).DEBUG.TX.BUF_STATUS;                    --DEBUG tx buf status
          localRdData( 2)            <=  Mon.CM(1).C2C(1).DEBUG.TX.RESET_DONE;                    --DEBUG tx reset done
          localRdData( 6 downto  3)  <=  reg_data(1032)( 6 downto  3);                            --DEBUG tx diff control
          localRdData( 7)            <=  reg_data(1032)( 7);                                      --DEBUG tx inhibit
          localRdData(14 downto  8)  <=  reg_data(1032)(14 downto  8);                            --DEBUG tx main cursor
          localRdData(15)            <=  reg_data(1032)(15);                                      --DEBUG tx pcs reset
          localRdData(16)            <=  reg_data(1032)(16);                                      --DEBUG tx pma reset
          localRdData(17)            <=  reg_data(1032)(17);                                      --DEBUG tx polarity
          localRdData(22 downto 18)  <=  reg_data(1032)(22 downto 18);                            --DEBUG post cursor
          localRdData(23)            <=  reg_data(1032)(23);                                      --DEBUG force PRBS error
          localRdData(26 downto 24)  <=  reg_data(1032)(26 downto 24);                            --DEBUG PRBS select
          localRdData(31 downto 27)  <=  reg_data(1032)(31 downto 27);                            --DEBUG pre cursor
        when 1040 => --0x410
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.ERRORS_ALL_TIME;               --Counter for all errors while locked
        when 1041 => --0x411
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.ERRORS_SINCE_LOCKED;           --Counter for errors since locked
        when 1042 => --0x412
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.CONFIG_ERROR_COUNT;            --Counter for CONFIG_ERROR
        when 1043 => --0x413
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.LINK_ERROR_COUNT;              --Counter for LINK_ERROR
        when 1044 => --0x414
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.MB_ERROR_COUNT;                --Counter for MB_ERROR
        when 1045 => --0x415
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.PHY_HARD_ERROR_COUNT;          --Counter for PHY_HARD_ERROR
        when 1046 => --0x416
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.PHY_SOFT_ERROR_COUNT;          --Counter for PHY_SOFT_ERROR
        when 1047 => --0x417
          localRdData( 2 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.PHYLANE_STATE;                 --Current state of phy_lane_control module
        when 1049 => --0x419
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.ERROR_WAITS_SINCE_LOCKED;      --Count for phylane in error state
        when 1050 => --0x41a
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.USER_CLK_FREQ;                 --Frequency of the user C2C clk
        when 1051 => --0x41b
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.XCVR_RESETS;                   --Count for phylane in error state
        when 1052 => --0x41c
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).COUNTERS.WAITING_TIMEOUTS;              --Count for phylane in error state
        when 1056 => --0x420
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).BRIDGE_INFO.AXI.ADDR_LSB;               --
        when 1057 => --0x421
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).BRIDGE_INFO.AXI.ADDR_MSB;               --
        when 1058 => --0x422
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).BRIDGE_INFO.AXI.SIZE;                   --
        when 1059 => --0x423
          localRdData( 0)            <=  Mon.CM(1).C2C(1).BRIDGE_INFO.AXI.VALID;                  --
        when 1060 => --0x424
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).BRIDGE_INFO.AXILITE.ADDR_LSB;           --
        when 1061 => --0x425
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).BRIDGE_INFO.AXILITE.ADDR_MSB;           --
        when 1062 => --0x426
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).BRIDGE_INFO.AXILITE.SIZE;               --
        when 1063 => --0x427
          localRdData( 0)            <=  Mon.CM(1).C2C(1).BRIDGE_INFO.AXILITE.VALID;              --
        when 1072 => --0x430
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(1).USER_FREQ;                              --Measured Freq of clock
        when 1073 => --0x431
          localRdData(23 downto  0)  <=  reg_data(1073)(23 downto  0);                            --Time spent waiting for phylane to stabilize
          localRdData(24)            <=  reg_data(1073)(24);                                      --phy_lane_control is enabled
        when 1074 => --0x432
          localRdData(19 downto  0)  <=  reg_data(1074)(19 downto  0);                            --Contious phy_lane_up signals required to lock phylane control
        when 1075 => --0x433
          localRdData( 7 downto  0)  <=  reg_data(1075)( 7 downto  0);                            --Number of failures before we reset the pma
        when 1076 => --0x434
          localRdData(31 downto  0)  <=  reg_data(1076)(31 downto  0);                            --Max single bit error rate
        when 1077 => --0x435
          localRdData(31 downto  0)  <=  reg_data(1077)(31 downto  0);                            --Max multi  bit error rate
        when 3072 => --0xc00
          localRdData( 0)            <=  Mon.CM(1).C2C(2).STATUS.CONFIG_ERROR;                    --C2C config error
          localRdData( 1)            <=  Mon.CM(1).C2C(2).STATUS.LINK_ERROR;                      --C2C link error
          localRdData( 2)            <=  Mon.CM(1).C2C(2).STATUS.LINK_GOOD;                       --C2C link FSM in SYNC
          localRdData( 3)            <=  Mon.CM(1).C2C(2).STATUS.MB_ERROR;                        --C2C multi-bit error
          localRdData( 4)            <=  Mon.CM(1).C2C(2).STATUS.DO_CC;                           --Aurora do CC
          localRdData( 5)            <=  reg_data(3072)( 5);                                      --C2C initialize
          localRdData( 8)            <=  Mon.CM(1).C2C(2).STATUS.PHY_RESET;                       --Aurora phy in reset
          localRdData( 9)            <=  Mon.CM(1).C2C(2).STATUS.PHY_GT_PLL_LOCK;                 --Aurora phy GT PLL locked
          localRdData(10)            <=  Mon.CM(1).C2C(2).STATUS.PHY_MMCM_LOL;                    --Aurora phy mmcm LOL
          localRdData(13 downto 12)  <=  Mon.CM(1).C2C(2).STATUS.PHY_LANE_UP;                     --Aurora phy lanes up
          localRdData(16)            <=  Mon.CM(1).C2C(2).STATUS.PHY_HARD_ERR;                    --Aurora phy hard error
          localRdData(17)            <=  Mon.CM(1).C2C(2).STATUS.PHY_SOFT_ERR;                    --Aurora phy soft error
          localRdData(31)            <=  Mon.CM(1).C2C(2).STATUS.LINK_IN_FW;                      --FW includes this link
        when 3076 => --0xc04
          localRdData( 7 downto  0)  <=  Mon.CM(1).C2C(2).DEBUG.DMONITOR;                         --DEBUG d monitor
          localRdData(20)            <=  Mon.CM(1).C2C(2).DEBUG.CPLL_LOCK;                        --DEBUG cplllock
          localRdData(21)            <=  Mon.CM(1).C2C(2).DEBUG.EYESCAN_DATA_ERROR;               --DEBUG eyescan data error
          localRdData(22)            <=  reg_data(3076)(22);                                      --DEBUG eyescan reset
          localRdData(23)            <=  reg_data(3076)(23);                                      --DEBUG eyescan trigger
          localRdData(24)            <=  Mon.CM(1).C2C(2).DEBUG.QPLL_LOCK;                        --DEBUG qplllock
        when 3078 => --0xc06
          localRdData( 2 downto  0)  <=  Mon.CM(1).C2C(2).DEBUG.RX.BUF_STATUS;                    --DEBUG rx buf status
          localRdData( 9 downto  3)  <=  Mon.CM(1).C2C(2).DEBUG.RX.MONITOR;                       --DEBUG rx status
          localRdData(10)            <=  Mon.CM(1).C2C(2).DEBUG.RX.PRBS_ERR;                      --DEBUG rx PRBS error
          localRdData(11)            <=  Mon.CM(1).C2C(2).DEBUG.RX.RESET_DONE;                    --DEBUG rx reset done
          localRdData(12)            <=  reg_data(3078)(12);                                      --DEBUG rx buf reset
          localRdData(13)            <=  reg_data(3078)(13);                                      --DEBUG rx CDR hold
          localRdData(14)            <=  reg_data(3078)(14);                                      --DEBUG rx DFE AGC HOLD
          localRdData(15)            <=  reg_data(3078)(15);                                      --DEBUG rx DFE AGC OVERRIDE
          localRdData(16)            <=  reg_data(3078)(16);                                      --DEBUG rx DFE LF HOLD
          localRdData(17)            <=  reg_data(3078)(17);                                      --DEBUG rx DFE LPM RESET
          localRdData(18)            <=  reg_data(3078)(18);                                      --DEBUG rx LPM ENABLE
          localRdData(19)            <=  reg_data(3078)(19);                                      --DEBUG rx LPM HF OVERRIDE enable
          localRdData(20)            <=  reg_data(3078)(20);                                      --DEBUG rx LPM LFKL override
          localRdData(22 downto 21)  <=  reg_data(3078)(22 downto 21);                            --DEBUG rx monitor select
          localRdData(23)            <=  reg_data(3078)(23);                                      --DEBUG rx pcs reset
          localRdData(24)            <=  reg_data(3078)(24);                                      --DEBUG rx pma reset
          localRdData(25)            <=  reg_data(3078)(25);                                      --DEBUG rx PRBS counter reset
          localRdData(28 downto 26)  <=  reg_data(3078)(28 downto 26);                            --DEBUG rx PRBS select
        when 3080 => --0xc08
          localRdData( 1 downto  0)  <=  Mon.CM(1).C2C(2).DEBUG.TX.BUF_STATUS;                    --DEBUG tx buf status
          localRdData( 2)            <=  Mon.CM(1).C2C(2).DEBUG.TX.RESET_DONE;                    --DEBUG tx reset done
          localRdData( 6 downto  3)  <=  reg_data(3080)( 6 downto  3);                            --DEBUG tx diff control
          localRdData( 7)            <=  reg_data(3080)( 7);                                      --DEBUG tx inhibit
          localRdData(14 downto  8)  <=  reg_data(3080)(14 downto  8);                            --DEBUG tx main cursor
          localRdData(15)            <=  reg_data(3080)(15);                                      --DEBUG tx pcs reset
          localRdData(16)            <=  reg_data(3080)(16);                                      --DEBUG tx pma reset
          localRdData(17)            <=  reg_data(3080)(17);                                      --DEBUG tx polarity
          localRdData(22 downto 18)  <=  reg_data(3080)(22 downto 18);                            --DEBUG post cursor
          localRdData(23)            <=  reg_data(3080)(23);                                      --DEBUG force PRBS error
          localRdData(26 downto 24)  <=  reg_data(3080)(26 downto 24);                            --DEBUG PRBS select
          localRdData(31 downto 27)  <=  reg_data(3080)(31 downto 27);                            --DEBUG pre cursor
        when 3088 => --0xc10
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.ERRORS_ALL_TIME;               --Counter for all errors while locked
        when 3089 => --0xc11
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.ERRORS_SINCE_LOCKED;           --Counter for errors since locked
        when 3090 => --0xc12
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.CONFIG_ERROR_COUNT;            --Counter for CONFIG_ERROR
        when 3091 => --0xc13
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.LINK_ERROR_COUNT;              --Counter for LINK_ERROR
        when 3092 => --0xc14
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.MB_ERROR_COUNT;                --Counter for MB_ERROR
        when 3093 => --0xc15
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.PHY_HARD_ERROR_COUNT;          --Counter for PHY_HARD_ERROR
        when 3094 => --0xc16
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.PHY_SOFT_ERROR_COUNT;          --Counter for PHY_SOFT_ERROR
        when 3095 => --0xc17
          localRdData( 2 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.PHYLANE_STATE;                 --Current state of phy_lane_control module
        when 3097 => --0xc19
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.ERROR_WAITS_SINCE_LOCKED;      --Count for phylane in error state
        when 3098 => --0xc1a
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.USER_CLK_FREQ;                 --Frequency of the user C2C clk
        when 3099 => --0xc1b
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.XCVR_RESETS;                   --Count for phylane in error state
        when 3100 => --0xc1c
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).COUNTERS.WAITING_TIMEOUTS;              --Count for phylane in error state
        when 3104 => --0xc20
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).BRIDGE_INFO.AXI.ADDR_LSB;               --
        when 3105 => --0xc21
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).BRIDGE_INFO.AXI.ADDR_MSB;               --
        when 3106 => --0xc22
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).BRIDGE_INFO.AXI.SIZE;                   --
        when 3107 => --0xc23
          localRdData( 0)            <=  Mon.CM(1).C2C(2).BRIDGE_INFO.AXI.VALID;                  --
        when 3108 => --0xc24
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).BRIDGE_INFO.AXILITE.ADDR_LSB;           --
        when 3109 => --0xc25
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).BRIDGE_INFO.AXILITE.ADDR_MSB;           --
        when 3110 => --0xc26
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).BRIDGE_INFO.AXILITE.SIZE;               --
        when 3111 => --0xc27
          localRdData( 0)            <=  Mon.CM(1).C2C(2).BRIDGE_INFO.AXILITE.VALID;              --
        when 3120 => --0xc30
          localRdData(31 downto  0)  <=  Mon.CM(1).C2C(2).USER_FREQ;                              --Measured Freq of clock
        when 3121 => --0xc31
          localRdData(23 downto  0)  <=  reg_data(3121)(23 downto  0);                            --Time spent waiting for phylane to stabilize
          localRdData(24)            <=  reg_data(3121)(24);                                      --phy_lane_control is enabled
        when 3122 => --0xc32
          localRdData(19 downto  0)  <=  reg_data(3122)(19 downto  0);                            --Contious phy_lane_up signals required to lock phylane control
        when 3123 => --0xc33
          localRdData( 7 downto  0)  <=  reg_data(3123)( 7 downto  0);                            --Number of failures before we reset the pma
        when 3124 => --0xc34
          localRdData(31 downto  0)  <=  reg_data(3124)(31 downto  0);                            --Max single bit error rate
        when 3125 => --0xc35
          localRdData(31 downto  0)  <=  reg_data(3125)(31 downto  0);                            --Max multi  bit error rate
        when 0 => --0x0
          localRdData( 0)            <=  reg_data( 0)( 0);                                        --Tell CM uC to power-up
          localRdData( 1)            <=  reg_data( 0)( 1);                                        --Tell CM uC to power-up the rest of the CM
          localRdData( 2)            <=  reg_data( 0)( 2);                                        --Ignore power good from CM
          localRdData( 3)            <=  Mon.CM(1).CTRL.PWR_GOOD;                                 --CM power is good
          localRdData( 7 downto  4)  <=  Mon.CM(1).CTRL.STATE;                                    --CM power up state
          localRdData( 8)            <=  reg_data( 0)( 8);                                        --CM power is good
          localRdData( 9)            <=  Mon.CM(1).CTRL.PWR_ENABLED;                              --power is enabled
          localRdData(10)            <=  Mon.CM(1).CTRL.IOS_ENABLED;                              --IOs to CM are enabled
        when 112 => --0x70
          localRdData( 7 downto  0)  <=  reg_data(112)( 7 downto  0);                             --Baud 16x counter.  Set by 50Mhz/(baudrate(hz) * 16). Nominally 27
          localRdData( 8)            <=  Mon.CM(1).MONITOR.ACTIVE;                                --Monitoring active. Is zero when no update in the last second.
          localRdData(15 downto 12)  <=  Mon.CM(1).MONITOR.HISTORY_VALID;                         --bytes valid in debug history
          localRdData(16)            <=  reg_data(112)(16);                                       --Enable readout
        when 113 => --0x71
          localRdData(31 downto  0)  <=  Mon.CM(1).MONITOR.HISTORY;                               --4 bytes of uart history
        when 114 => --0x72
          localRdData( 7 downto  0)  <=  Mon.CM(1).MONITOR.BAD_TRANS.ADDR;                        --Sensor addr bits
          localRdData(23 downto  8)  <=  Mon.CM(1).MONITOR.BAD_TRANS.DATA;                        --Sensor data bits
          localRdData(31 downto 24)  <=  Mon.CM(1).MONITOR.BAD_TRANS.ERROR_MASK;                  --Sensor error bits
        when 115 => --0x73
          localRdData( 7 downto  0)  <=  Mon.CM(1).MONITOR.LAST_TRANS.ADDR;                       --Sensor addr bits
          localRdData(23 downto  8)  <=  Mon.CM(1).MONITOR.LAST_TRANS.DATA;                       --Sensor data bits
          localRdData(31 downto 24)  <=  Mon.CM(1).MONITOR.LAST_TRANS.ERROR_MASK;                 --Sensor error bits
        when 116 => --0x74
          localRdData( 0)            <=  reg_data(116)( 0);                                       --Reset monitoring error counters
        when 117 => --0x75
          localRdData(15 downto  0)  <=  Mon.CM(1).MONITOR.ERRORS.CNT_BAD_SOF;                    --Monitoring errors. Count of invalid byte types in parsing.
          localRdData(31 downto 16)  <=  Mon.CM(1).MONITOR.ERRORS.CNT_AXI_BUSY_BYTE2;             --Monitoring errors. Count of invalid byte types in parsing.
        when 118 => --0x76
          localRdData(15 downto  0)  <=  Mon.CM(1).MONITOR.ERRORS.CNT_BYTE2_NOT_DATA;             --Monitoring errors. Count of invalid byte types in parsing.
          localRdData(31 downto 16)  <=  Mon.CM(1).MONITOR.ERRORS.CNT_BYTE3_NOT_DATA;             --Monitoring errors. Count of invalid byte types in parsing.
        when 119 => --0x77
          localRdData(15 downto  0)  <=  Mon.CM(1).MONITOR.ERRORS.CNT_BYTE4_NOT_DATA;             --Monitoring errors. Count of invalid byte types in parsing.
          localRdData(31 downto 16)  <=  Mon.CM(1).MONITOR.ERRORS.CNT_TIMEOUT;                    --Monitoring errors. Count of invalid byte types in parsing.
        when 120 => --0x78
          localRdData(15 downto  0)  <=  Mon.CM(1).MONITOR.ERRORS.CNT_UNKNOWN;                    --Monitoring errors. Count of invalid byte types in parsing.
        when 121 => --0x79
          localRdData(31 downto  0)  <=  Mon.CM(1).MONITOR.UART_BYTES;                            --Count of UART bytes from CM MCU
        when 122 => --0x7a
          localRdData(31 downto  0)  <=  reg_data(122)(31 downto  0);                             --Count to wait for in state machine before timing out (50Mhz clk)
        when 1280 => --0x500
          localRdData( 0)            <=  Mon.CM(2).C2C(1).STATUS.CONFIG_ERROR;                    --C2C config error
          localRdData( 1)            <=  Mon.CM(2).C2C(1).STATUS.LINK_ERROR;                      --C2C link error
          localRdData( 2)            <=  Mon.CM(2).C2C(1).STATUS.LINK_GOOD;                       --C2C link FSM in SYNC
          localRdData( 3)            <=  Mon.CM(2).C2C(1).STATUS.MB_ERROR;                        --C2C multi-bit error
          localRdData( 4)            <=  Mon.CM(2).C2C(1).STATUS.DO_CC;                           --Aurora do CC
          localRdData( 5)            <=  reg_data(1280)( 5);                                      --C2C initialize
          localRdData( 8)            <=  Mon.CM(2).C2C(1).STATUS.PHY_RESET;                       --Aurora phy in reset
          localRdData( 9)            <=  Mon.CM(2).C2C(1).STATUS.PHY_GT_PLL_LOCK;                 --Aurora phy GT PLL locked
          localRdData(10)            <=  Mon.CM(2).C2C(1).STATUS.PHY_MMCM_LOL;                    --Aurora phy mmcm LOL
          localRdData(13 downto 12)  <=  Mon.CM(2).C2C(1).STATUS.PHY_LANE_UP;                     --Aurora phy lanes up
          localRdData(16)            <=  Mon.CM(2).C2C(1).STATUS.PHY_HARD_ERR;                    --Aurora phy hard error
          localRdData(17)            <=  Mon.CM(2).C2C(1).STATUS.PHY_SOFT_ERR;                    --Aurora phy soft error
          localRdData(31)            <=  Mon.CM(2).C2C(1).STATUS.LINK_IN_FW;                      --FW includes this link
        when 1284 => --0x504
          localRdData( 7 downto  0)  <=  Mon.CM(2).C2C(1).DEBUG.DMONITOR;                         --DEBUG d monitor
          localRdData(20)            <=  Mon.CM(2).C2C(1).DEBUG.CPLL_LOCK;                        --DEBUG cplllock
          localRdData(21)            <=  Mon.CM(2).C2C(1).DEBUG.EYESCAN_DATA_ERROR;               --DEBUG eyescan data error
          localRdData(22)            <=  reg_data(1284)(22);                                      --DEBUG eyescan reset
          localRdData(23)            <=  reg_data(1284)(23);                                      --DEBUG eyescan trigger
          localRdData(24)            <=  Mon.CM(2).C2C(1).DEBUG.QPLL_LOCK;                        --DEBUG qplllock
        when 1286 => --0x506
          localRdData( 2 downto  0)  <=  Mon.CM(2).C2C(1).DEBUG.RX.BUF_STATUS;                    --DEBUG rx buf status
          localRdData( 9 downto  3)  <=  Mon.CM(2).C2C(1).DEBUG.RX.MONITOR;                       --DEBUG rx status
          localRdData(10)            <=  Mon.CM(2).C2C(1).DEBUG.RX.PRBS_ERR;                      --DEBUG rx PRBS error
          localRdData(11)            <=  Mon.CM(2).C2C(1).DEBUG.RX.RESET_DONE;                    --DEBUG rx reset done
          localRdData(12)            <=  reg_data(1286)(12);                                      --DEBUG rx buf reset
          localRdData(13)            <=  reg_data(1286)(13);                                      --DEBUG rx CDR hold
          localRdData(14)            <=  reg_data(1286)(14);                                      --DEBUG rx DFE AGC HOLD
          localRdData(15)            <=  reg_data(1286)(15);                                      --DEBUG rx DFE AGC OVERRIDE
          localRdData(16)            <=  reg_data(1286)(16);                                      --DEBUG rx DFE LF HOLD
          localRdData(17)            <=  reg_data(1286)(17);                                      --DEBUG rx DFE LPM RESET
          localRdData(18)            <=  reg_data(1286)(18);                                      --DEBUG rx LPM ENABLE
          localRdData(19)            <=  reg_data(1286)(19);                                      --DEBUG rx LPM HF OVERRIDE enable
          localRdData(20)            <=  reg_data(1286)(20);                                      --DEBUG rx LPM LFKL override
          localRdData(22 downto 21)  <=  reg_data(1286)(22 downto 21);                            --DEBUG rx monitor select
          localRdData(23)            <=  reg_data(1286)(23);                                      --DEBUG rx pcs reset
          localRdData(24)            <=  reg_data(1286)(24);                                      --DEBUG rx pma reset
          localRdData(25)            <=  reg_data(1286)(25);                                      --DEBUG rx PRBS counter reset
          localRdData(28 downto 26)  <=  reg_data(1286)(28 downto 26);                            --DEBUG rx PRBS select
        when 1288 => --0x508
          localRdData( 1 downto  0)  <=  Mon.CM(2).C2C(1).DEBUG.TX.BUF_STATUS;                    --DEBUG tx buf status
          localRdData( 2)            <=  Mon.CM(2).C2C(1).DEBUG.TX.RESET_DONE;                    --DEBUG tx reset done
          localRdData( 6 downto  3)  <=  reg_data(1288)( 6 downto  3);                            --DEBUG tx diff control
          localRdData( 7)            <=  reg_data(1288)( 7);                                      --DEBUG tx inhibit
          localRdData(14 downto  8)  <=  reg_data(1288)(14 downto  8);                            --DEBUG tx main cursor
          localRdData(15)            <=  reg_data(1288)(15);                                      --DEBUG tx pcs reset
          localRdData(16)            <=  reg_data(1288)(16);                                      --DEBUG tx pma reset
          localRdData(17)            <=  reg_data(1288)(17);                                      --DEBUG tx polarity
          localRdData(22 downto 18)  <=  reg_data(1288)(22 downto 18);                            --DEBUG post cursor
          localRdData(23)            <=  reg_data(1288)(23);                                      --DEBUG force PRBS error
          localRdData(26 downto 24)  <=  reg_data(1288)(26 downto 24);                            --DEBUG PRBS select
          localRdData(31 downto 27)  <=  reg_data(1288)(31 downto 27);                            --DEBUG pre cursor
        when 1296 => --0x510
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.ERRORS_ALL_TIME;               --Counter for all errors while locked
        when 1297 => --0x511
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.ERRORS_SINCE_LOCKED;           --Counter for errors since locked
        when 1298 => --0x512
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.CONFIG_ERROR_COUNT;            --Counter for CONFIG_ERROR
        when 1299 => --0x513
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.LINK_ERROR_COUNT;              --Counter for LINK_ERROR
        when 1300 => --0x514
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.MB_ERROR_COUNT;                --Counter for MB_ERROR
        when 1301 => --0x515
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.PHY_HARD_ERROR_COUNT;          --Counter for PHY_HARD_ERROR
        when 1302 => --0x516
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.PHY_SOFT_ERROR_COUNT;          --Counter for PHY_SOFT_ERROR
        when 1303 => --0x517
          localRdData( 2 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.PHYLANE_STATE;                 --Current state of phy_lane_control module
        when 1305 => --0x519
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.ERROR_WAITS_SINCE_LOCKED;      --Count for phylane in error state
        when 1306 => --0x51a
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.USER_CLK_FREQ;                 --Frequency of the user C2C clk
        when 1307 => --0x51b
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.XCVR_RESETS;                   --Count for phylane in error state
        when 1308 => --0x51c
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).COUNTERS.WAITING_TIMEOUTS;              --Count for phylane in error state
        when 1312 => --0x520
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).BRIDGE_INFO.AXI.ADDR_LSB;               --
        when 1313 => --0x521
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).BRIDGE_INFO.AXI.ADDR_MSB;               --
        when 1314 => --0x522
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).BRIDGE_INFO.AXI.SIZE;                   --
        when 1315 => --0x523
          localRdData( 0)            <=  Mon.CM(2).C2C(1).BRIDGE_INFO.AXI.VALID;                  --
        when 1316 => --0x524
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).BRIDGE_INFO.AXILITE.ADDR_LSB;           --
        when 1317 => --0x525
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).BRIDGE_INFO.AXILITE.ADDR_MSB;           --
        when 1318 => --0x526
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).BRIDGE_INFO.AXILITE.SIZE;               --
        when 1319 => --0x527
          localRdData( 0)            <=  Mon.CM(2).C2C(1).BRIDGE_INFO.AXILITE.VALID;              --
        when 1328 => --0x530
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(1).USER_FREQ;                              --Measured Freq of clock
        when 1329 => --0x531
          localRdData(23 downto  0)  <=  reg_data(1329)(23 downto  0);                            --Time spent waiting for phylane to stabilize
          localRdData(24)            <=  reg_data(1329)(24);                                      --phy_lane_control is enabled
        when 1330 => --0x532
          localRdData(19 downto  0)  <=  reg_data(1330)(19 downto  0);                            --Contious phy_lane_up signals required to lock phylane control
        when 1331 => --0x533
          localRdData( 7 downto  0)  <=  reg_data(1331)( 7 downto  0);                            --Number of failures before we reset the pma
        when 1332 => --0x534
          localRdData(31 downto  0)  <=  reg_data(1332)(31 downto  0);                            --Max single bit error rate
        when 1333 => --0x535
          localRdData(31 downto  0)  <=  reg_data(1333)(31 downto  0);                            --Max multi  bit error rate
        when 3328 => --0xd00
          localRdData( 0)            <=  Mon.CM(2).C2C(2).STATUS.CONFIG_ERROR;                    --C2C config error
          localRdData( 1)            <=  Mon.CM(2).C2C(2).STATUS.LINK_ERROR;                      --C2C link error
          localRdData( 2)            <=  Mon.CM(2).C2C(2).STATUS.LINK_GOOD;                       --C2C link FSM in SYNC
          localRdData( 3)            <=  Mon.CM(2).C2C(2).STATUS.MB_ERROR;                        --C2C multi-bit error
          localRdData( 4)            <=  Mon.CM(2).C2C(2).STATUS.DO_CC;                           --Aurora do CC
          localRdData( 5)            <=  reg_data(3328)( 5);                                      --C2C initialize
          localRdData( 8)            <=  Mon.CM(2).C2C(2).STATUS.PHY_RESET;                       --Aurora phy in reset
          localRdData( 9)            <=  Mon.CM(2).C2C(2).STATUS.PHY_GT_PLL_LOCK;                 --Aurora phy GT PLL locked
          localRdData(10)            <=  Mon.CM(2).C2C(2).STATUS.PHY_MMCM_LOL;                    --Aurora phy mmcm LOL
          localRdData(13 downto 12)  <=  Mon.CM(2).C2C(2).STATUS.PHY_LANE_UP;                     --Aurora phy lanes up
          localRdData(16)            <=  Mon.CM(2).C2C(2).STATUS.PHY_HARD_ERR;                    --Aurora phy hard error
          localRdData(17)            <=  Mon.CM(2).C2C(2).STATUS.PHY_SOFT_ERR;                    --Aurora phy soft error
          localRdData(31)            <=  Mon.CM(2).C2C(2).STATUS.LINK_IN_FW;                      --FW includes this link
        when 3332 => --0xd04
          localRdData( 7 downto  0)  <=  Mon.CM(2).C2C(2).DEBUG.DMONITOR;                         --DEBUG d monitor
          localRdData(20)            <=  Mon.CM(2).C2C(2).DEBUG.CPLL_LOCK;                        --DEBUG cplllock
          localRdData(21)            <=  Mon.CM(2).C2C(2).DEBUG.EYESCAN_DATA_ERROR;               --DEBUG eyescan data error
          localRdData(22)            <=  reg_data(3332)(22);                                      --DEBUG eyescan reset
          localRdData(23)            <=  reg_data(3332)(23);                                      --DEBUG eyescan trigger
          localRdData(24)            <=  Mon.CM(2).C2C(2).DEBUG.QPLL_LOCK;                        --DEBUG qplllock
        when 3334 => --0xd06
          localRdData( 2 downto  0)  <=  Mon.CM(2).C2C(2).DEBUG.RX.BUF_STATUS;                    --DEBUG rx buf status
          localRdData( 9 downto  3)  <=  Mon.CM(2).C2C(2).DEBUG.RX.MONITOR;                       --DEBUG rx status
          localRdData(10)            <=  Mon.CM(2).C2C(2).DEBUG.RX.PRBS_ERR;                      --DEBUG rx PRBS error
          localRdData(11)            <=  Mon.CM(2).C2C(2).DEBUG.RX.RESET_DONE;                    --DEBUG rx reset done
          localRdData(12)            <=  reg_data(3334)(12);                                      --DEBUG rx buf reset
          localRdData(13)            <=  reg_data(3334)(13);                                      --DEBUG rx CDR hold
          localRdData(14)            <=  reg_data(3334)(14);                                      --DEBUG rx DFE AGC HOLD
          localRdData(15)            <=  reg_data(3334)(15);                                      --DEBUG rx DFE AGC OVERRIDE
          localRdData(16)            <=  reg_data(3334)(16);                                      --DEBUG rx DFE LF HOLD
          localRdData(17)            <=  reg_data(3334)(17);                                      --DEBUG rx DFE LPM RESET
          localRdData(18)            <=  reg_data(3334)(18);                                      --DEBUG rx LPM ENABLE
          localRdData(19)            <=  reg_data(3334)(19);                                      --DEBUG rx LPM HF OVERRIDE enable
          localRdData(20)            <=  reg_data(3334)(20);                                      --DEBUG rx LPM LFKL override
          localRdData(22 downto 21)  <=  reg_data(3334)(22 downto 21);                            --DEBUG rx monitor select
          localRdData(23)            <=  reg_data(3334)(23);                                      --DEBUG rx pcs reset
          localRdData(24)            <=  reg_data(3334)(24);                                      --DEBUG rx pma reset
          localRdData(25)            <=  reg_data(3334)(25);                                      --DEBUG rx PRBS counter reset
          localRdData(28 downto 26)  <=  reg_data(3334)(28 downto 26);                            --DEBUG rx PRBS select
        when 3336 => --0xd08
          localRdData( 1 downto  0)  <=  Mon.CM(2).C2C(2).DEBUG.TX.BUF_STATUS;                    --DEBUG tx buf status
          localRdData( 2)            <=  Mon.CM(2).C2C(2).DEBUG.TX.RESET_DONE;                    --DEBUG tx reset done
          localRdData( 6 downto  3)  <=  reg_data(3336)( 6 downto  3);                            --DEBUG tx diff control
          localRdData( 7)            <=  reg_data(3336)( 7);                                      --DEBUG tx inhibit
          localRdData(14 downto  8)  <=  reg_data(3336)(14 downto  8);                            --DEBUG tx main cursor
          localRdData(15)            <=  reg_data(3336)(15);                                      --DEBUG tx pcs reset
          localRdData(16)            <=  reg_data(3336)(16);                                      --DEBUG tx pma reset
          localRdData(17)            <=  reg_data(3336)(17);                                      --DEBUG tx polarity
          localRdData(22 downto 18)  <=  reg_data(3336)(22 downto 18);                            --DEBUG post cursor
          localRdData(23)            <=  reg_data(3336)(23);                                      --DEBUG force PRBS error
          localRdData(26 downto 24)  <=  reg_data(3336)(26 downto 24);                            --DEBUG PRBS select
          localRdData(31 downto 27)  <=  reg_data(3336)(31 downto 27);                            --DEBUG pre cursor
        when 3344 => --0xd10
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.ERRORS_ALL_TIME;               --Counter for all errors while locked
        when 3345 => --0xd11
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.ERRORS_SINCE_LOCKED;           --Counter for errors since locked
        when 3346 => --0xd12
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.CONFIG_ERROR_COUNT;            --Counter for CONFIG_ERROR
        when 3347 => --0xd13
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.LINK_ERROR_COUNT;              --Counter for LINK_ERROR
        when 3348 => --0xd14
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.MB_ERROR_COUNT;                --Counter for MB_ERROR
        when 3349 => --0xd15
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.PHY_HARD_ERROR_COUNT;          --Counter for PHY_HARD_ERROR
        when 3350 => --0xd16
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.PHY_SOFT_ERROR_COUNT;          --Counter for PHY_SOFT_ERROR
        when 3351 => --0xd17
          localRdData( 2 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.PHYLANE_STATE;                 --Current state of phy_lane_control module
        when 3353 => --0xd19
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.ERROR_WAITS_SINCE_LOCKED;      --Count for phylane in error state
        when 3354 => --0xd1a
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.USER_CLK_FREQ;                 --Frequency of the user C2C clk
        when 3355 => --0xd1b
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.XCVR_RESETS;                   --Count for phylane in error state
        when 3356 => --0xd1c
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).COUNTERS.WAITING_TIMEOUTS;              --Count for phylane in error state
        when 3360 => --0xd20
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).BRIDGE_INFO.AXI.ADDR_LSB;               --
        when 3361 => --0xd21
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).BRIDGE_INFO.AXI.ADDR_MSB;               --
        when 3362 => --0xd22
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).BRIDGE_INFO.AXI.SIZE;                   --
        when 3363 => --0xd23
          localRdData( 0)            <=  Mon.CM(2).C2C(2).BRIDGE_INFO.AXI.VALID;                  --
        when 3364 => --0xd24
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).BRIDGE_INFO.AXILITE.ADDR_LSB;           --
        when 3365 => --0xd25
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).BRIDGE_INFO.AXILITE.ADDR_MSB;           --
        when 3366 => --0xd26
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).BRIDGE_INFO.AXILITE.SIZE;               --
        when 3367 => --0xd27
          localRdData( 0)            <=  Mon.CM(2).C2C(2).BRIDGE_INFO.AXILITE.VALID;              --
        when 3376 => --0xd30
          localRdData(31 downto  0)  <=  Mon.CM(2).C2C(2).USER_FREQ;                              --Measured Freq of clock
        when 3377 => --0xd31
          localRdData(23 downto  0)  <=  reg_data(3377)(23 downto  0);                            --Time spent waiting for phylane to stabilize
          localRdData(24)            <=  reg_data(3377)(24);                                      --phy_lane_control is enabled
        when 3378 => --0xd32
          localRdData(19 downto  0)  <=  reg_data(3378)(19 downto  0);                            --Contious phy_lane_up signals required to lock phylane control
        when 3379 => --0xd33
          localRdData( 7 downto  0)  <=  reg_data(3379)( 7 downto  0);                            --Number of failures before we reset the pma
        when 3380 => --0xd34
          localRdData(31 downto  0)  <=  reg_data(3380)(31 downto  0);                            --Max single bit error rate
        when 3381 => --0xd35
          localRdData(31 downto  0)  <=  reg_data(3381)(31 downto  0);                            --Max multi  bit error rate
        when 256 => --0x100
          localRdData( 0)            <=  reg_data(256)( 0);                                       --Tell CM uC to power-up
          localRdData( 1)            <=  reg_data(256)( 1);                                       --Tell CM uC to power-up the rest of the CM
          localRdData( 2)            <=  reg_data(256)( 2);                                       --Ignore power good from CM
          localRdData( 3)            <=  Mon.CM(2).CTRL.PWR_GOOD;                                 --CM power is good
          localRdData( 7 downto  4)  <=  Mon.CM(2).CTRL.STATE;                                    --CM power up state
          localRdData( 8)            <=  reg_data(256)( 8);                                       --CM power is good
          localRdData( 9)            <=  Mon.CM(2).CTRL.PWR_ENABLED;                              --power is enabled
          localRdData(10)            <=  Mon.CM(2).CTRL.IOS_ENABLED;                              --IOs to CM are enabled
        when 368 => --0x170
          localRdData( 7 downto  0)  <=  reg_data(368)( 7 downto  0);                             --Baud 16x counter.  Set by 50Mhz/(baudrate(hz) * 16). Nominally 27
          localRdData( 8)            <=  Mon.CM(2).MONITOR.ACTIVE;                                --Monitoring active. Is zero when no update in the last second.
          localRdData(15 downto 12)  <=  Mon.CM(2).MONITOR.HISTORY_VALID;                         --bytes valid in debug history
          localRdData(16)            <=  reg_data(368)(16);                                       --Enable readout
        when 369 => --0x171
          localRdData(31 downto  0)  <=  Mon.CM(2).MONITOR.HISTORY;                               --4 bytes of uart history
        when 370 => --0x172
          localRdData( 7 downto  0)  <=  Mon.CM(2).MONITOR.BAD_TRANS.ADDR;                        --Sensor addr bits
          localRdData(23 downto  8)  <=  Mon.CM(2).MONITOR.BAD_TRANS.DATA;                        --Sensor data bits
          localRdData(31 downto 24)  <=  Mon.CM(2).MONITOR.BAD_TRANS.ERROR_MASK;                  --Sensor error bits
        when 371 => --0x173
          localRdData( 7 downto  0)  <=  Mon.CM(2).MONITOR.LAST_TRANS.ADDR;                       --Sensor addr bits
          localRdData(23 downto  8)  <=  Mon.CM(2).MONITOR.LAST_TRANS.DATA;                       --Sensor data bits
          localRdData(31 downto 24)  <=  Mon.CM(2).MONITOR.LAST_TRANS.ERROR_MASK;                 --Sensor error bits
        when 372 => --0x174
          localRdData( 0)            <=  reg_data(372)( 0);                                       --Reset monitoring error counters
        when 373 => --0x175
          localRdData(15 downto  0)  <=  Mon.CM(2).MONITOR.ERRORS.CNT_BAD_SOF;                    --Monitoring errors. Count of invalid byte types in parsing.
          localRdData(31 downto 16)  <=  Mon.CM(2).MONITOR.ERRORS.CNT_AXI_BUSY_BYTE2;             --Monitoring errors. Count of invalid byte types in parsing.
        when 374 => --0x176
          localRdData(15 downto  0)  <=  Mon.CM(2).MONITOR.ERRORS.CNT_BYTE2_NOT_DATA;             --Monitoring errors. Count of invalid byte types in parsing.
          localRdData(31 downto 16)  <=  Mon.CM(2).MONITOR.ERRORS.CNT_BYTE3_NOT_DATA;             --Monitoring errors. Count of invalid byte types in parsing.
        when 375 => --0x177
          localRdData(15 downto  0)  <=  Mon.CM(2).MONITOR.ERRORS.CNT_BYTE4_NOT_DATA;             --Monitoring errors. Count of invalid byte types in parsing.
          localRdData(31 downto 16)  <=  Mon.CM(2).MONITOR.ERRORS.CNT_TIMEOUT;                    --Monitoring errors. Count of invalid byte types in parsing.
        when 376 => --0x178
          localRdData(15 downto  0)  <=  Mon.CM(2).MONITOR.ERRORS.CNT_UNKNOWN;                    --Monitoring errors. Count of invalid byte types in parsing.
        when 377 => --0x179
          localRdData(31 downto  0)  <=  Mon.CM(2).MONITOR.UART_BYTES;                            --Count of UART bytes from CM MCU
        when 378 => --0x17a
          localRdData(31 downto  0)  <=  reg_data(378)(31 downto  0);                             --Count to wait for in state machine before timing out (50Mhz clk)


        when others =>
          localRdData <= x"00000000";
      end case;
    end if;
  end process reads;




  -- Register mapping to ctrl structures
  Ctrl.CM(1).C2C(1).STATUS.INITIALIZE              <=  reg_data(1024)( 5);               
  Ctrl.CM(1).C2C(1).DEBUG.EYESCAN_RESET            <=  reg_data(1028)(22);               
  Ctrl.CM(1).C2C(1).DEBUG.EYESCAN_TRIGGER          <=  reg_data(1028)(23);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.BUF_RESET             <=  reg_data(1030)(12);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.CDR_HOLD              <=  reg_data(1030)(13);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.DFE_AGC_HOLD          <=  reg_data(1030)(14);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.DFE_AGC_OVERRIDE      <=  reg_data(1030)(15);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.DFE_LF_HOLD           <=  reg_data(1030)(16);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.DFE_LPM_RESET         <=  reg_data(1030)(17);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.LPM_EN                <=  reg_data(1030)(18);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.LPM_HF_OVERRIDE       <=  reg_data(1030)(19);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.LPM_LFKL_OVERRIDE     <=  reg_data(1030)(20);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.MON_SEL               <=  reg_data(1030)(22 downto 21);     
  Ctrl.CM(1).C2C(1).DEBUG.RX.PCS_RESET             <=  reg_data(1030)(23);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.PMA_RESET             <=  reg_data(1030)(24);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.PRBS_CNT_RST          <=  reg_data(1030)(25);               
  Ctrl.CM(1).C2C(1).DEBUG.RX.PRBS_SEL              <=  reg_data(1030)(28 downto 26);     
  Ctrl.CM(1).C2C(1).DEBUG.TX.DIFF_CTRL             <=  reg_data(1032)( 6 downto  3);     
  Ctrl.CM(1).C2C(1).DEBUG.TX.INHIBIT               <=  reg_data(1032)( 7);               
  Ctrl.CM(1).C2C(1).DEBUG.TX.MAIN_CURSOR           <=  reg_data(1032)(14 downto  8);     
  Ctrl.CM(1).C2C(1).DEBUG.TX.PCS_RESET             <=  reg_data(1032)(15);               
  Ctrl.CM(1).C2C(1).DEBUG.TX.PMA_RESET             <=  reg_data(1032)(16);               
  Ctrl.CM(1).C2C(1).DEBUG.TX.POLARITY              <=  reg_data(1032)(17);               
  Ctrl.CM(1).C2C(1).DEBUG.TX.POST_CURSOR           <=  reg_data(1032)(22 downto 18);     
  Ctrl.CM(1).C2C(1).DEBUG.TX.PRBS_FORCE_ERR        <=  reg_data(1032)(23);               
  Ctrl.CM(1).C2C(1).DEBUG.TX.PRBS_SEL              <=  reg_data(1032)(26 downto 24);     
  Ctrl.CM(1).C2C(1).DEBUG.TX.PRE_CURSOR            <=  reg_data(1032)(31 downto 27);     
  Ctrl.CM(1).C2C(1).PHY_READ_TIME                  <=  reg_data(1073)(23 downto  0);     
  Ctrl.CM(1).C2C(1).ENABLE_PHY_CTRL                <=  reg_data(1073)(24);               
  Ctrl.CM(1).C2C(1).PHY_LANE_STABLE                <=  reg_data(1074)(19 downto  0);     
  Ctrl.CM(1).C2C(1).PHY_LANE_ERRORS_TO_RESET       <=  reg_data(1075)( 7 downto  0);     
  Ctrl.CM(1).C2C(1).PHY_MAX_SINGLE_BIT_ERROR_RATE  <=  reg_data(1076)(31 downto  0);     
  Ctrl.CM(1).C2C(1).PHY_MAX_MULTI_BIT_ERROR_RATE   <=  reg_data(1077)(31 downto  0);     
  Ctrl.CM(1).C2C(2).STATUS.INITIALIZE              <=  reg_data(3072)( 5);               
  Ctrl.CM(1).C2C(2).DEBUG.EYESCAN_RESET            <=  reg_data(3076)(22);               
  Ctrl.CM(1).C2C(2).DEBUG.EYESCAN_TRIGGER          <=  reg_data(3076)(23);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.BUF_RESET             <=  reg_data(3078)(12);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.CDR_HOLD              <=  reg_data(3078)(13);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.DFE_AGC_HOLD          <=  reg_data(3078)(14);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.DFE_AGC_OVERRIDE      <=  reg_data(3078)(15);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.DFE_LF_HOLD           <=  reg_data(3078)(16);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.DFE_LPM_RESET         <=  reg_data(3078)(17);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.LPM_EN                <=  reg_data(3078)(18);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.LPM_HF_OVERRIDE       <=  reg_data(3078)(19);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.LPM_LFKL_OVERRIDE     <=  reg_data(3078)(20);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.MON_SEL               <=  reg_data(3078)(22 downto 21);     
  Ctrl.CM(1).C2C(2).DEBUG.RX.PCS_RESET             <=  reg_data(3078)(23);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.PMA_RESET             <=  reg_data(3078)(24);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.PRBS_CNT_RST          <=  reg_data(3078)(25);               
  Ctrl.CM(1).C2C(2).DEBUG.RX.PRBS_SEL              <=  reg_data(3078)(28 downto 26);     
  Ctrl.CM(1).C2C(2).DEBUG.TX.DIFF_CTRL             <=  reg_data(3080)( 6 downto  3);     
  Ctrl.CM(1).C2C(2).DEBUG.TX.INHIBIT               <=  reg_data(3080)( 7);               
  Ctrl.CM(1).C2C(2).DEBUG.TX.MAIN_CURSOR           <=  reg_data(3080)(14 downto  8);     
  Ctrl.CM(1).C2C(2).DEBUG.TX.PCS_RESET             <=  reg_data(3080)(15);               
  Ctrl.CM(1).C2C(2).DEBUG.TX.PMA_RESET             <=  reg_data(3080)(16);               
  Ctrl.CM(1).C2C(2).DEBUG.TX.POLARITY              <=  reg_data(3080)(17);               
  Ctrl.CM(1).C2C(2).DEBUG.TX.POST_CURSOR           <=  reg_data(3080)(22 downto 18);     
  Ctrl.CM(1).C2C(2).DEBUG.TX.PRBS_FORCE_ERR        <=  reg_data(3080)(23);               
  Ctrl.CM(1).C2C(2).DEBUG.TX.PRBS_SEL              <=  reg_data(3080)(26 downto 24);     
  Ctrl.CM(1).C2C(2).DEBUG.TX.PRE_CURSOR            <=  reg_data(3080)(31 downto 27);     
  Ctrl.CM(1).C2C(2).PHY_READ_TIME                  <=  reg_data(3121)(23 downto  0);     
  Ctrl.CM(1).C2C(2).ENABLE_PHY_CTRL                <=  reg_data(3121)(24);               
  Ctrl.CM(1).C2C(2).PHY_LANE_STABLE                <=  reg_data(3122)(19 downto  0);     
  Ctrl.CM(1).C2C(2).PHY_LANE_ERRORS_TO_RESET       <=  reg_data(3123)( 7 downto  0);     
  Ctrl.CM(1).C2C(2).PHY_MAX_SINGLE_BIT_ERROR_RATE  <=  reg_data(3124)(31 downto  0);     
  Ctrl.CM(1).C2C(2).PHY_MAX_MULTI_BIT_ERROR_RATE   <=  reg_data(3125)(31 downto  0);     
  Ctrl.CM(1).CTRL.ENABLE_UC                        <=  reg_data( 0)( 0);                 
  Ctrl.CM(1).CTRL.ENABLE_PWR                       <=  reg_data( 0)( 1);                 
  Ctrl.CM(1).CTRL.OVERRIDE_PWR_GOOD                <=  reg_data( 0)( 2);                 
  Ctrl.CM(1).CTRL.ERROR_STATE_RESET                <=  reg_data( 0)( 8);                 
  Ctrl.CM(1).MONITOR.COUNT_16X_BAUD                <=  reg_data(112)( 7 downto  0);      
  Ctrl.CM(1).MONITOR.ENABLE                        <=  reg_data(112)(16);                
  Ctrl.CM(1).MONITOR.ERRORS.RESET                  <=  reg_data(116)( 0);                
  Ctrl.CM(1).MONITOR.SM_TIMEOUT                    <=  reg_data(122)(31 downto  0);      
  Ctrl.CM(2).C2C(1).STATUS.INITIALIZE              <=  reg_data(1280)( 5);               
  Ctrl.CM(2).C2C(1).DEBUG.EYESCAN_RESET            <=  reg_data(1284)(22);               
  Ctrl.CM(2).C2C(1).DEBUG.EYESCAN_TRIGGER          <=  reg_data(1284)(23);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.BUF_RESET             <=  reg_data(1286)(12);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.CDR_HOLD              <=  reg_data(1286)(13);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.DFE_AGC_HOLD          <=  reg_data(1286)(14);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.DFE_AGC_OVERRIDE      <=  reg_data(1286)(15);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.DFE_LF_HOLD           <=  reg_data(1286)(16);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.DFE_LPM_RESET         <=  reg_data(1286)(17);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.LPM_EN                <=  reg_data(1286)(18);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.LPM_HF_OVERRIDE       <=  reg_data(1286)(19);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.LPM_LFKL_OVERRIDE     <=  reg_data(1286)(20);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.MON_SEL               <=  reg_data(1286)(22 downto 21);     
  Ctrl.CM(2).C2C(1).DEBUG.RX.PCS_RESET             <=  reg_data(1286)(23);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.PMA_RESET             <=  reg_data(1286)(24);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.PRBS_CNT_RST          <=  reg_data(1286)(25);               
  Ctrl.CM(2).C2C(1).DEBUG.RX.PRBS_SEL              <=  reg_data(1286)(28 downto 26);     
  Ctrl.CM(2).C2C(1).DEBUG.TX.DIFF_CTRL             <=  reg_data(1288)( 6 downto  3);     
  Ctrl.CM(2).C2C(1).DEBUG.TX.INHIBIT               <=  reg_data(1288)( 7);               
  Ctrl.CM(2).C2C(1).DEBUG.TX.MAIN_CURSOR           <=  reg_data(1288)(14 downto  8);     
  Ctrl.CM(2).C2C(1).DEBUG.TX.PCS_RESET             <=  reg_data(1288)(15);               
  Ctrl.CM(2).C2C(1).DEBUG.TX.PMA_RESET             <=  reg_data(1288)(16);               
  Ctrl.CM(2).C2C(1).DEBUG.TX.POLARITY              <=  reg_data(1288)(17);               
  Ctrl.CM(2).C2C(1).DEBUG.TX.POST_CURSOR           <=  reg_data(1288)(22 downto 18);     
  Ctrl.CM(2).C2C(1).DEBUG.TX.PRBS_FORCE_ERR        <=  reg_data(1288)(23);               
  Ctrl.CM(2).C2C(1).DEBUG.TX.PRBS_SEL              <=  reg_data(1288)(26 downto 24);     
  Ctrl.CM(2).C2C(1).DEBUG.TX.PRE_CURSOR            <=  reg_data(1288)(31 downto 27);     
  Ctrl.CM(2).C2C(1).PHY_READ_TIME                  <=  reg_data(1329)(23 downto  0);     
  Ctrl.CM(2).C2C(1).ENABLE_PHY_CTRL                <=  reg_data(1329)(24);               
  Ctrl.CM(2).C2C(1).PHY_LANE_STABLE                <=  reg_data(1330)(19 downto  0);     
  Ctrl.CM(2).C2C(1).PHY_LANE_ERRORS_TO_RESET       <=  reg_data(1331)( 7 downto  0);     
  Ctrl.CM(2).C2C(1).PHY_MAX_SINGLE_BIT_ERROR_RATE  <=  reg_data(1332)(31 downto  0);     
  Ctrl.CM(2).C2C(1).PHY_MAX_MULTI_BIT_ERROR_RATE   <=  reg_data(1333)(31 downto  0);     
  Ctrl.CM(2).C2C(2).STATUS.INITIALIZE              <=  reg_data(3328)( 5);               
  Ctrl.CM(2).C2C(2).DEBUG.EYESCAN_RESET            <=  reg_data(3332)(22);               
  Ctrl.CM(2).C2C(2).DEBUG.EYESCAN_TRIGGER          <=  reg_data(3332)(23);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.BUF_RESET             <=  reg_data(3334)(12);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.CDR_HOLD              <=  reg_data(3334)(13);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.DFE_AGC_HOLD          <=  reg_data(3334)(14);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.DFE_AGC_OVERRIDE      <=  reg_data(3334)(15);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.DFE_LF_HOLD           <=  reg_data(3334)(16);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.DFE_LPM_RESET         <=  reg_data(3334)(17);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.LPM_EN                <=  reg_data(3334)(18);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.LPM_HF_OVERRIDE       <=  reg_data(3334)(19);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.LPM_LFKL_OVERRIDE     <=  reg_data(3334)(20);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.MON_SEL               <=  reg_data(3334)(22 downto 21);     
  Ctrl.CM(2).C2C(2).DEBUG.RX.PCS_RESET             <=  reg_data(3334)(23);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.PMA_RESET             <=  reg_data(3334)(24);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.PRBS_CNT_RST          <=  reg_data(3334)(25);               
  Ctrl.CM(2).C2C(2).DEBUG.RX.PRBS_SEL              <=  reg_data(3334)(28 downto 26);     
  Ctrl.CM(2).C2C(2).DEBUG.TX.DIFF_CTRL             <=  reg_data(3336)( 6 downto  3);     
  Ctrl.CM(2).C2C(2).DEBUG.TX.INHIBIT               <=  reg_data(3336)( 7);               
  Ctrl.CM(2).C2C(2).DEBUG.TX.MAIN_CURSOR           <=  reg_data(3336)(14 downto  8);     
  Ctrl.CM(2).C2C(2).DEBUG.TX.PCS_RESET             <=  reg_data(3336)(15);               
  Ctrl.CM(2).C2C(2).DEBUG.TX.PMA_RESET             <=  reg_data(3336)(16);               
  Ctrl.CM(2).C2C(2).DEBUG.TX.POLARITY              <=  reg_data(3336)(17);               
  Ctrl.CM(2).C2C(2).DEBUG.TX.POST_CURSOR           <=  reg_data(3336)(22 downto 18);     
  Ctrl.CM(2).C2C(2).DEBUG.TX.PRBS_FORCE_ERR        <=  reg_data(3336)(23);               
  Ctrl.CM(2).C2C(2).DEBUG.TX.PRBS_SEL              <=  reg_data(3336)(26 downto 24);     
  Ctrl.CM(2).C2C(2).DEBUG.TX.PRE_CURSOR            <=  reg_data(3336)(31 downto 27);     
  Ctrl.CM(2).C2C(2).PHY_READ_TIME                  <=  reg_data(3377)(23 downto  0);     
  Ctrl.CM(2).C2C(2).ENABLE_PHY_CTRL                <=  reg_data(3377)(24);               
  Ctrl.CM(2).C2C(2).PHY_LANE_STABLE                <=  reg_data(3378)(19 downto  0);     
  Ctrl.CM(2).C2C(2).PHY_LANE_ERRORS_TO_RESET       <=  reg_data(3379)( 7 downto  0);     
  Ctrl.CM(2).C2C(2).PHY_MAX_SINGLE_BIT_ERROR_RATE  <=  reg_data(3380)(31 downto  0);     
  Ctrl.CM(2).C2C(2).PHY_MAX_MULTI_BIT_ERROR_RATE   <=  reg_data(3381)(31 downto  0);     
  Ctrl.CM(2).CTRL.ENABLE_UC                        <=  reg_data(256)( 0);                
  Ctrl.CM(2).CTRL.ENABLE_PWR                       <=  reg_data(256)( 1);                
  Ctrl.CM(2).CTRL.OVERRIDE_PWR_GOOD                <=  reg_data(256)( 2);                
  Ctrl.CM(2).CTRL.ERROR_STATE_RESET                <=  reg_data(256)( 8);                
  Ctrl.CM(2).MONITOR.COUNT_16X_BAUD                <=  reg_data(368)( 7 downto  0);      
  Ctrl.CM(2).MONITOR.ENABLE                        <=  reg_data(368)(16);                
  Ctrl.CM(2).MONITOR.ERRORS.RESET                  <=  reg_data(372)( 0);                
  Ctrl.CM(2).MONITOR.SM_TIMEOUT                    <=  reg_data(378)(31 downto  0);      


  reg_writes: process (clk_axi, reset_axi_n) is
  begin  -- process reg_writes
    if reset_axi_n = '0' then                 -- asynchronous reset (active low)
      reg_data(1024)( 5)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).STATUS.INITIALIZE;
      reg_data(1028)(22)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.EYESCAN_RESET;
      reg_data(1028)(23)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.EYESCAN_TRIGGER;
      reg_data(1030)(12)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.BUF_RESET;
      reg_data(1030)(13)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.CDR_HOLD;
      reg_data(1030)(14)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.DFE_AGC_HOLD;
      reg_data(1030)(15)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.DFE_AGC_OVERRIDE;
      reg_data(1030)(16)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.DFE_LF_HOLD;
      reg_data(1030)(17)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.DFE_LPM_RESET;
      reg_data(1030)(18)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.LPM_EN;
      reg_data(1030)(19)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.LPM_HF_OVERRIDE;
      reg_data(1030)(20)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.LPM_LFKL_OVERRIDE;
      reg_data(1030)(22 downto 21)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.MON_SEL;
      reg_data(1030)(23)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.PCS_RESET;
      reg_data(1030)(24)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.PMA_RESET;
      reg_data(1030)(25)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.PRBS_CNT_RST;
      reg_data(1030)(28 downto 26)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.RX.PRBS_SEL;
      reg_data(1032)( 6 downto  3)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.DIFF_CTRL;
      reg_data(1032)( 7)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.INHIBIT;
      reg_data(1032)(14 downto  8)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.MAIN_CURSOR;
      reg_data(1032)(15)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.PCS_RESET;
      reg_data(1032)(16)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.PMA_RESET;
      reg_data(1032)(17)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.POLARITY;
      reg_data(1032)(22 downto 18)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.POST_CURSOR;
      reg_data(1032)(23)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.PRBS_FORCE_ERR;
      reg_data(1032)(26 downto 24)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.PRBS_SEL;
      reg_data(1032)(31 downto 27)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).DEBUG.TX.PRE_CURSOR;
      reg_data(1073)(23 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).PHY_READ_TIME;
      reg_data(1073)(24)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).ENABLE_PHY_CTRL;
      reg_data(1074)(19 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).PHY_LANE_STABLE;
      reg_data(1075)( 7 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).PHY_LANE_ERRORS_TO_RESET;
      reg_data(1076)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).PHY_MAX_SINGLE_BIT_ERROR_RATE;
      reg_data(1077)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(1).PHY_MAX_MULTI_BIT_ERROR_RATE;
      reg_data(3072)( 5)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).STATUS.INITIALIZE;
      reg_data(3076)(22)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.EYESCAN_RESET;
      reg_data(3076)(23)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.EYESCAN_TRIGGER;
      reg_data(3078)(12)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.BUF_RESET;
      reg_data(3078)(13)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.CDR_HOLD;
      reg_data(3078)(14)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.DFE_AGC_HOLD;
      reg_data(3078)(15)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.DFE_AGC_OVERRIDE;
      reg_data(3078)(16)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.DFE_LF_HOLD;
      reg_data(3078)(17)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.DFE_LPM_RESET;
      reg_data(3078)(18)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.LPM_EN;
      reg_data(3078)(19)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.LPM_HF_OVERRIDE;
      reg_data(3078)(20)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.LPM_LFKL_OVERRIDE;
      reg_data(3078)(22 downto 21)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.MON_SEL;
      reg_data(3078)(23)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.PCS_RESET;
      reg_data(3078)(24)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.PMA_RESET;
      reg_data(3078)(25)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.PRBS_CNT_RST;
      reg_data(3078)(28 downto 26)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.RX.PRBS_SEL;
      reg_data(3080)( 6 downto  3)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.DIFF_CTRL;
      reg_data(3080)( 7)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.INHIBIT;
      reg_data(3080)(14 downto  8)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.MAIN_CURSOR;
      reg_data(3080)(15)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.PCS_RESET;
      reg_data(3080)(16)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.PMA_RESET;
      reg_data(3080)(17)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.POLARITY;
      reg_data(3080)(22 downto 18)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.POST_CURSOR;
      reg_data(3080)(23)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.PRBS_FORCE_ERR;
      reg_data(3080)(26 downto 24)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.PRBS_SEL;
      reg_data(3080)(31 downto 27)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).DEBUG.TX.PRE_CURSOR;
      reg_data(3121)(23 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).PHY_READ_TIME;
      reg_data(3121)(24)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).ENABLE_PHY_CTRL;
      reg_data(3122)(19 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).PHY_LANE_STABLE;
      reg_data(3123)( 7 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).PHY_LANE_ERRORS_TO_RESET;
      reg_data(3124)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).PHY_MAX_SINGLE_BIT_ERROR_RATE;
      reg_data(3125)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).C2C(2).PHY_MAX_MULTI_BIT_ERROR_RATE;
      reg_data( 0)( 0)  <= DEFAULT_CM_CTRL_t.CM(1).CTRL.ENABLE_UC;
      reg_data( 0)( 1)  <= DEFAULT_CM_CTRL_t.CM(1).CTRL.ENABLE_PWR;
      reg_data( 0)( 2)  <= DEFAULT_CM_CTRL_t.CM(1).CTRL.OVERRIDE_PWR_GOOD;
      reg_data( 0)( 8)  <= DEFAULT_CM_CTRL_t.CM(1).CTRL.ERROR_STATE_RESET;
      reg_data(112)( 7 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).MONITOR.COUNT_16X_BAUD;
      reg_data(112)(16)  <= DEFAULT_CM_CTRL_t.CM(1).MONITOR.ENABLE;
      reg_data(116)( 0)  <= DEFAULT_CM_CTRL_t.CM(1).MONITOR.ERRORS.RESET;
      reg_data(122)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(1).MONITOR.SM_TIMEOUT;
      reg_data(1280)( 5)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).STATUS.INITIALIZE;
      reg_data(1284)(22)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.EYESCAN_RESET;
      reg_data(1284)(23)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.EYESCAN_TRIGGER;
      reg_data(1286)(12)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.BUF_RESET;
      reg_data(1286)(13)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.CDR_HOLD;
      reg_data(1286)(14)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.DFE_AGC_HOLD;
      reg_data(1286)(15)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.DFE_AGC_OVERRIDE;
      reg_data(1286)(16)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.DFE_LF_HOLD;
      reg_data(1286)(17)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.DFE_LPM_RESET;
      reg_data(1286)(18)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.LPM_EN;
      reg_data(1286)(19)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.LPM_HF_OVERRIDE;
      reg_data(1286)(20)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.LPM_LFKL_OVERRIDE;
      reg_data(1286)(22 downto 21)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.MON_SEL;
      reg_data(1286)(23)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.PCS_RESET;
      reg_data(1286)(24)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.PMA_RESET;
      reg_data(1286)(25)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.PRBS_CNT_RST;
      reg_data(1286)(28 downto 26)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.RX.PRBS_SEL;
      reg_data(1288)( 6 downto  3)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.DIFF_CTRL;
      reg_data(1288)( 7)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.INHIBIT;
      reg_data(1288)(14 downto  8)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.MAIN_CURSOR;
      reg_data(1288)(15)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.PCS_RESET;
      reg_data(1288)(16)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.PMA_RESET;
      reg_data(1288)(17)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.POLARITY;
      reg_data(1288)(22 downto 18)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.POST_CURSOR;
      reg_data(1288)(23)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.PRBS_FORCE_ERR;
      reg_data(1288)(26 downto 24)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.PRBS_SEL;
      reg_data(1288)(31 downto 27)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).DEBUG.TX.PRE_CURSOR;
      reg_data(1329)(23 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).PHY_READ_TIME;
      reg_data(1329)(24)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).ENABLE_PHY_CTRL;
      reg_data(1330)(19 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).PHY_LANE_STABLE;
      reg_data(1331)( 7 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).PHY_LANE_ERRORS_TO_RESET;
      reg_data(1332)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).PHY_MAX_SINGLE_BIT_ERROR_RATE;
      reg_data(1333)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(1).PHY_MAX_MULTI_BIT_ERROR_RATE;
      reg_data(3328)( 5)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).STATUS.INITIALIZE;
      reg_data(3332)(22)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.EYESCAN_RESET;
      reg_data(3332)(23)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.EYESCAN_TRIGGER;
      reg_data(3334)(12)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.BUF_RESET;
      reg_data(3334)(13)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.CDR_HOLD;
      reg_data(3334)(14)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.DFE_AGC_HOLD;
      reg_data(3334)(15)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.DFE_AGC_OVERRIDE;
      reg_data(3334)(16)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.DFE_LF_HOLD;
      reg_data(3334)(17)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.DFE_LPM_RESET;
      reg_data(3334)(18)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.LPM_EN;
      reg_data(3334)(19)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.LPM_HF_OVERRIDE;
      reg_data(3334)(20)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.LPM_LFKL_OVERRIDE;
      reg_data(3334)(22 downto 21)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.MON_SEL;
      reg_data(3334)(23)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.PCS_RESET;
      reg_data(3334)(24)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.PMA_RESET;
      reg_data(3334)(25)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.PRBS_CNT_RST;
      reg_data(3334)(28 downto 26)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.RX.PRBS_SEL;
      reg_data(3336)( 6 downto  3)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.DIFF_CTRL;
      reg_data(3336)( 7)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.INHIBIT;
      reg_data(3336)(14 downto  8)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.MAIN_CURSOR;
      reg_data(3336)(15)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.PCS_RESET;
      reg_data(3336)(16)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.PMA_RESET;
      reg_data(3336)(17)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.POLARITY;
      reg_data(3336)(22 downto 18)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.POST_CURSOR;
      reg_data(3336)(23)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.PRBS_FORCE_ERR;
      reg_data(3336)(26 downto 24)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.PRBS_SEL;
      reg_data(3336)(31 downto 27)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).DEBUG.TX.PRE_CURSOR;
      reg_data(3377)(23 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).PHY_READ_TIME;
      reg_data(3377)(24)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).ENABLE_PHY_CTRL;
      reg_data(3378)(19 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).PHY_LANE_STABLE;
      reg_data(3379)( 7 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).PHY_LANE_ERRORS_TO_RESET;
      reg_data(3380)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).PHY_MAX_SINGLE_BIT_ERROR_RATE;
      reg_data(3381)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).C2C(2).PHY_MAX_MULTI_BIT_ERROR_RATE;
      reg_data(256)( 0)  <= DEFAULT_CM_CTRL_t.CM(2).CTRL.ENABLE_UC;
      reg_data(256)( 1)  <= DEFAULT_CM_CTRL_t.CM(2).CTRL.ENABLE_PWR;
      reg_data(256)( 2)  <= DEFAULT_CM_CTRL_t.CM(2).CTRL.OVERRIDE_PWR_GOOD;
      reg_data(256)( 8)  <= DEFAULT_CM_CTRL_t.CM(2).CTRL.ERROR_STATE_RESET;
      reg_data(368)( 7 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).MONITOR.COUNT_16X_BAUD;
      reg_data(368)(16)  <= DEFAULT_CM_CTRL_t.CM(2).MONITOR.ENABLE;
      reg_data(372)( 0)  <= DEFAULT_CM_CTRL_t.CM(2).MONITOR.ERRORS.RESET;
      reg_data(378)(31 downto  0)  <= DEFAULT_CM_CTRL_t.CM(2).MONITOR.SM_TIMEOUT;

    elsif clk_axi'event and clk_axi = '1' then  -- rising clock edge
      Ctrl.CM(1).C2C(1).COUNTERS.RESET_COUNTERS <= '0';
      Ctrl.CM(1).C2C(2).COUNTERS.RESET_COUNTERS <= '0';
      Ctrl.CM(2).C2C(1).COUNTERS.RESET_COUNTERS <= '0';
      Ctrl.CM(2).C2C(2).COUNTERS.RESET_COUNTERS <= '0';
      

      
      if localWrEn = '1' then
        case to_integer(unsigned(localAddress(11 downto 0))) is
        when 1024 => --0x400
          reg_data(1024)( 5)                         <=  localWrData( 5);                --C2C initialize
        when 1028 => --0x404
          reg_data(1028)(22)                         <=  localWrData(22);                --DEBUG eyescan reset
          reg_data(1028)(23)                         <=  localWrData(23);                --DEBUG eyescan trigger
        when 1030 => --0x406
          reg_data(1030)(12)                         <=  localWrData(12);                --DEBUG rx buf reset
          reg_data(1030)(13)                         <=  localWrData(13);                --DEBUG rx CDR hold
          reg_data(1030)(14)                         <=  localWrData(14);                --DEBUG rx DFE AGC HOLD
          reg_data(1030)(15)                         <=  localWrData(15);                --DEBUG rx DFE AGC OVERRIDE
          reg_data(1030)(16)                         <=  localWrData(16);                --DEBUG rx DFE LF HOLD
          reg_data(1030)(17)                         <=  localWrData(17);                --DEBUG rx DFE LPM RESET
          reg_data(1030)(18)                         <=  localWrData(18);                --DEBUG rx LPM ENABLE
          reg_data(1030)(19)                         <=  localWrData(19);                --DEBUG rx LPM HF OVERRIDE enable
          reg_data(1030)(20)                         <=  localWrData(20);                --DEBUG rx LPM LFKL override
          reg_data(1030)(22 downto 21)               <=  localWrData(22 downto 21);      --DEBUG rx monitor select
          reg_data(1030)(23)                         <=  localWrData(23);                --DEBUG rx pcs reset
          reg_data(1030)(24)                         <=  localWrData(24);                --DEBUG rx pma reset
          reg_data(1030)(25)                         <=  localWrData(25);                --DEBUG rx PRBS counter reset
          reg_data(1030)(28 downto 26)               <=  localWrData(28 downto 26);      --DEBUG rx PRBS select
        when 1032 => --0x408
          reg_data(1032)( 6 downto  3)               <=  localWrData( 6 downto  3);      --DEBUG tx diff control
          reg_data(1032)( 7)                         <=  localWrData( 7);                --DEBUG tx inhibit
          reg_data(1032)(14 downto  8)               <=  localWrData(14 downto  8);      --DEBUG tx main cursor
          reg_data(1032)(15)                         <=  localWrData(15);                --DEBUG tx pcs reset
          reg_data(1032)(16)                         <=  localWrData(16);                --DEBUG tx pma reset
          reg_data(1032)(17)                         <=  localWrData(17);                --DEBUG tx polarity
          reg_data(1032)(22 downto 18)               <=  localWrData(22 downto 18);      --DEBUG post cursor
          reg_data(1032)(23)                         <=  localWrData(23);                --DEBUG force PRBS error
          reg_data(1032)(26 downto 24)               <=  localWrData(26 downto 24);      --DEBUG PRBS select
          reg_data(1032)(31 downto 27)               <=  localWrData(31 downto 27);      --DEBUG pre cursor
        when 1048 => --0x418
          Ctrl.CM(1).C2C(1).COUNTERS.RESET_COUNTERS  <=  localWrData( 0);               
        when 1073 => --0x431
          reg_data(1073)(23 downto  0)               <=  localWrData(23 downto  0);      --Time spent waiting for phylane to stabilize
          reg_data(1073)(24)                         <=  localWrData(24);                --phy_lane_control is enabled
        when 1074 => --0x432
          reg_data(1074)(19 downto  0)               <=  localWrData(19 downto  0);      --Contious phy_lane_up signals required to lock phylane control
        when 1075 => --0x433
          reg_data(1075)( 7 downto  0)               <=  localWrData( 7 downto  0);      --Number of failures before we reset the pma
        when 1076 => --0x434
          reg_data(1076)(31 downto  0)               <=  localWrData(31 downto  0);      --Max single bit error rate
        when 1077 => --0x435
          reg_data(1077)(31 downto  0)               <=  localWrData(31 downto  0);      --Max multi  bit error rate
        when 3072 => --0xc00
          reg_data(3072)( 5)                         <=  localWrData( 5);                --C2C initialize
        when 3076 => --0xc04
          reg_data(3076)(22)                         <=  localWrData(22);                --DEBUG eyescan reset
          reg_data(3076)(23)                         <=  localWrData(23);                --DEBUG eyescan trigger
        when 3078 => --0xc06
          reg_data(3078)(12)                         <=  localWrData(12);                --DEBUG rx buf reset
          reg_data(3078)(13)                         <=  localWrData(13);                --DEBUG rx CDR hold
          reg_data(3078)(14)                         <=  localWrData(14);                --DEBUG rx DFE AGC HOLD
          reg_data(3078)(15)                         <=  localWrData(15);                --DEBUG rx DFE AGC OVERRIDE
          reg_data(3078)(16)                         <=  localWrData(16);                --DEBUG rx DFE LF HOLD
          reg_data(3078)(17)                         <=  localWrData(17);                --DEBUG rx DFE LPM RESET
          reg_data(3078)(18)                         <=  localWrData(18);                --DEBUG rx LPM ENABLE
          reg_data(3078)(19)                         <=  localWrData(19);                --DEBUG rx LPM HF OVERRIDE enable
          reg_data(3078)(20)                         <=  localWrData(20);                --DEBUG rx LPM LFKL override
          reg_data(3078)(22 downto 21)               <=  localWrData(22 downto 21);      --DEBUG rx monitor select
          reg_data(3078)(23)                         <=  localWrData(23);                --DEBUG rx pcs reset
          reg_data(3078)(24)                         <=  localWrData(24);                --DEBUG rx pma reset
          reg_data(3078)(25)                         <=  localWrData(25);                --DEBUG rx PRBS counter reset
          reg_data(3078)(28 downto 26)               <=  localWrData(28 downto 26);      --DEBUG rx PRBS select
        when 3080 => --0xc08
          reg_data(3080)( 6 downto  3)               <=  localWrData( 6 downto  3);      --DEBUG tx diff control
          reg_data(3080)( 7)                         <=  localWrData( 7);                --DEBUG tx inhibit
          reg_data(3080)(14 downto  8)               <=  localWrData(14 downto  8);      --DEBUG tx main cursor
          reg_data(3080)(15)                         <=  localWrData(15);                --DEBUG tx pcs reset
          reg_data(3080)(16)                         <=  localWrData(16);                --DEBUG tx pma reset
          reg_data(3080)(17)                         <=  localWrData(17);                --DEBUG tx polarity
          reg_data(3080)(22 downto 18)               <=  localWrData(22 downto 18);      --DEBUG post cursor
          reg_data(3080)(23)                         <=  localWrData(23);                --DEBUG force PRBS error
          reg_data(3080)(26 downto 24)               <=  localWrData(26 downto 24);      --DEBUG PRBS select
          reg_data(3080)(31 downto 27)               <=  localWrData(31 downto 27);      --DEBUG pre cursor
        when 3096 => --0xc18
          Ctrl.CM(1).C2C(2).COUNTERS.RESET_COUNTERS  <=  localWrData( 0);               
        when 3121 => --0xc31
          reg_data(3121)(23 downto  0)               <=  localWrData(23 downto  0);      --Time spent waiting for phylane to stabilize
          reg_data(3121)(24)                         <=  localWrData(24);                --phy_lane_control is enabled
        when 3122 => --0xc32
          reg_data(3122)(19 downto  0)               <=  localWrData(19 downto  0);      --Contious phy_lane_up signals required to lock phylane control
        when 3123 => --0xc33
          reg_data(3123)( 7 downto  0)               <=  localWrData( 7 downto  0);      --Number of failures before we reset the pma
        when 3124 => --0xc34
          reg_data(3124)(31 downto  0)               <=  localWrData(31 downto  0);      --Max single bit error rate
        when 3125 => --0xc35
          reg_data(3125)(31 downto  0)               <=  localWrData(31 downto  0);      --Max multi  bit error rate
        when 0 => --0x0
          reg_data( 0)( 0)                           <=  localWrData( 0);                --Tell CM uC to power-up
          reg_data( 0)( 1)                           <=  localWrData( 1);                --Tell CM uC to power-up the rest of the CM
          reg_data( 0)( 2)                           <=  localWrData( 2);                --Ignore power good from CM
          reg_data( 0)( 8)                           <=  localWrData( 8);                --CM power is good
        when 112 => --0x70
          reg_data(112)( 7 downto  0)                <=  localWrData( 7 downto  0);      --Baud 16x counter.  Set by 50Mhz/(baudrate(hz) * 16). Nominally 27
          reg_data(112)(16)                          <=  localWrData(16);                --Enable readout
        when 116 => --0x74
          reg_data(116)( 0)                          <=  localWrData( 0);                --Reset monitoring error counters
        when 122 => --0x7a
          reg_data(122)(31 downto  0)                <=  localWrData(31 downto  0);      --Count to wait for in state machine before timing out (50Mhz clk)
        when 1280 => --0x500
          reg_data(1280)( 5)                         <=  localWrData( 5);                --C2C initialize
        when 1284 => --0x504
          reg_data(1284)(22)                         <=  localWrData(22);                --DEBUG eyescan reset
          reg_data(1284)(23)                         <=  localWrData(23);                --DEBUG eyescan trigger
        when 1286 => --0x506
          reg_data(1286)(12)                         <=  localWrData(12);                --DEBUG rx buf reset
          reg_data(1286)(13)                         <=  localWrData(13);                --DEBUG rx CDR hold
          reg_data(1286)(14)                         <=  localWrData(14);                --DEBUG rx DFE AGC HOLD
          reg_data(1286)(15)                         <=  localWrData(15);                --DEBUG rx DFE AGC OVERRIDE
          reg_data(1286)(16)                         <=  localWrData(16);                --DEBUG rx DFE LF HOLD
          reg_data(1286)(17)                         <=  localWrData(17);                --DEBUG rx DFE LPM RESET
          reg_data(1286)(18)                         <=  localWrData(18);                --DEBUG rx LPM ENABLE
          reg_data(1286)(19)                         <=  localWrData(19);                --DEBUG rx LPM HF OVERRIDE enable
          reg_data(1286)(20)                         <=  localWrData(20);                --DEBUG rx LPM LFKL override
          reg_data(1286)(22 downto 21)               <=  localWrData(22 downto 21);      --DEBUG rx monitor select
          reg_data(1286)(23)                         <=  localWrData(23);                --DEBUG rx pcs reset
          reg_data(1286)(24)                         <=  localWrData(24);                --DEBUG rx pma reset
          reg_data(1286)(25)                         <=  localWrData(25);                --DEBUG rx PRBS counter reset
          reg_data(1286)(28 downto 26)               <=  localWrData(28 downto 26);      --DEBUG rx PRBS select
        when 1288 => --0x508
          reg_data(1288)( 6 downto  3)               <=  localWrData( 6 downto  3);      --DEBUG tx diff control
          reg_data(1288)( 7)                         <=  localWrData( 7);                --DEBUG tx inhibit
          reg_data(1288)(14 downto  8)               <=  localWrData(14 downto  8);      --DEBUG tx main cursor
          reg_data(1288)(15)                         <=  localWrData(15);                --DEBUG tx pcs reset
          reg_data(1288)(16)                         <=  localWrData(16);                --DEBUG tx pma reset
          reg_data(1288)(17)                         <=  localWrData(17);                --DEBUG tx polarity
          reg_data(1288)(22 downto 18)               <=  localWrData(22 downto 18);      --DEBUG post cursor
          reg_data(1288)(23)                         <=  localWrData(23);                --DEBUG force PRBS error
          reg_data(1288)(26 downto 24)               <=  localWrData(26 downto 24);      --DEBUG PRBS select
          reg_data(1288)(31 downto 27)               <=  localWrData(31 downto 27);      --DEBUG pre cursor
        when 1304 => --0x518
          Ctrl.CM(2).C2C(1).COUNTERS.RESET_COUNTERS  <=  localWrData( 0);               
        when 1329 => --0x531
          reg_data(1329)(23 downto  0)               <=  localWrData(23 downto  0);      --Time spent waiting for phylane to stabilize
          reg_data(1329)(24)                         <=  localWrData(24);                --phy_lane_control is enabled
        when 1330 => --0x532
          reg_data(1330)(19 downto  0)               <=  localWrData(19 downto  0);      --Contious phy_lane_up signals required to lock phylane control
        when 1331 => --0x533
          reg_data(1331)( 7 downto  0)               <=  localWrData( 7 downto  0);      --Number of failures before we reset the pma
        when 1332 => --0x534
          reg_data(1332)(31 downto  0)               <=  localWrData(31 downto  0);      --Max single bit error rate
        when 1333 => --0x535
          reg_data(1333)(31 downto  0)               <=  localWrData(31 downto  0);      --Max multi  bit error rate
        when 3328 => --0xd00
          reg_data(3328)( 5)                         <=  localWrData( 5);                --C2C initialize
        when 3332 => --0xd04
          reg_data(3332)(22)                         <=  localWrData(22);                --DEBUG eyescan reset
          reg_data(3332)(23)                         <=  localWrData(23);                --DEBUG eyescan trigger
        when 3334 => --0xd06
          reg_data(3334)(12)                         <=  localWrData(12);                --DEBUG rx buf reset
          reg_data(3334)(13)                         <=  localWrData(13);                --DEBUG rx CDR hold
          reg_data(3334)(14)                         <=  localWrData(14);                --DEBUG rx DFE AGC HOLD
          reg_data(3334)(15)                         <=  localWrData(15);                --DEBUG rx DFE AGC OVERRIDE
          reg_data(3334)(16)                         <=  localWrData(16);                --DEBUG rx DFE LF HOLD
          reg_data(3334)(17)                         <=  localWrData(17);                --DEBUG rx DFE LPM RESET
          reg_data(3334)(18)                         <=  localWrData(18);                --DEBUG rx LPM ENABLE
          reg_data(3334)(19)                         <=  localWrData(19);                --DEBUG rx LPM HF OVERRIDE enable
          reg_data(3334)(20)                         <=  localWrData(20);                --DEBUG rx LPM LFKL override
          reg_data(3334)(22 downto 21)               <=  localWrData(22 downto 21);      --DEBUG rx monitor select
          reg_data(3334)(23)                         <=  localWrData(23);                --DEBUG rx pcs reset
          reg_data(3334)(24)                         <=  localWrData(24);                --DEBUG rx pma reset
          reg_data(3334)(25)                         <=  localWrData(25);                --DEBUG rx PRBS counter reset
          reg_data(3334)(28 downto 26)               <=  localWrData(28 downto 26);      --DEBUG rx PRBS select
        when 3336 => --0xd08
          reg_data(3336)( 6 downto  3)               <=  localWrData( 6 downto  3);      --DEBUG tx diff control
          reg_data(3336)( 7)                         <=  localWrData( 7);                --DEBUG tx inhibit
          reg_data(3336)(14 downto  8)               <=  localWrData(14 downto  8);      --DEBUG tx main cursor
          reg_data(3336)(15)                         <=  localWrData(15);                --DEBUG tx pcs reset
          reg_data(3336)(16)                         <=  localWrData(16);                --DEBUG tx pma reset
          reg_data(3336)(17)                         <=  localWrData(17);                --DEBUG tx polarity
          reg_data(3336)(22 downto 18)               <=  localWrData(22 downto 18);      --DEBUG post cursor
          reg_data(3336)(23)                         <=  localWrData(23);                --DEBUG force PRBS error
          reg_data(3336)(26 downto 24)               <=  localWrData(26 downto 24);      --DEBUG PRBS select
          reg_data(3336)(31 downto 27)               <=  localWrData(31 downto 27);      --DEBUG pre cursor
        when 3352 => --0xd18
          Ctrl.CM(2).C2C(2).COUNTERS.RESET_COUNTERS  <=  localWrData( 0);               
        when 3377 => --0xd31
          reg_data(3377)(23 downto  0)               <=  localWrData(23 downto  0);      --Time spent waiting for phylane to stabilize
          reg_data(3377)(24)                         <=  localWrData(24);                --phy_lane_control is enabled
        when 3378 => --0xd32
          reg_data(3378)(19 downto  0)               <=  localWrData(19 downto  0);      --Contious phy_lane_up signals required to lock phylane control
        when 3379 => --0xd33
          reg_data(3379)( 7 downto  0)               <=  localWrData( 7 downto  0);      --Number of failures before we reset the pma
        when 3380 => --0xd34
          reg_data(3380)(31 downto  0)               <=  localWrData(31 downto  0);      --Max single bit error rate
        when 3381 => --0xd35
          reg_data(3381)(31 downto  0)               <=  localWrData(31 downto  0);      --Max multi  bit error rate
        when 256 => --0x100
          reg_data(256)( 0)                          <=  localWrData( 0);                --Tell CM uC to power-up
          reg_data(256)( 1)                          <=  localWrData( 1);                --Tell CM uC to power-up the rest of the CM
          reg_data(256)( 2)                          <=  localWrData( 2);                --Ignore power good from CM
          reg_data(256)( 8)                          <=  localWrData( 8);                --CM power is good
        when 368 => --0x170
          reg_data(368)( 7 downto  0)                <=  localWrData( 7 downto  0);      --Baud 16x counter.  Set by 50Mhz/(baudrate(hz) * 16). Nominally 27
          reg_data(368)(16)                          <=  localWrData(16);                --Enable readout
        when 372 => --0x174
          reg_data(372)( 0)                          <=  localWrData( 0);                --Reset monitoring error counters
        when 378 => --0x17a
          reg_data(378)(31 downto  0)                <=  localWrData(31 downto  0);      --Count to wait for in state machine before timing out (50Mhz clk)

          when others => null;
        end case;
      end if;
    end if;
  end process reg_writes;


end architecture behavioral;